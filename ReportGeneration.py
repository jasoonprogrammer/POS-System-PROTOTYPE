# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Report_Generation.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import matplotlib.pyplot as plt
import matplotlib as mpl
import mysql.connector
import numpy as np
import os
import threading
import pandas as pd
pd.options.display.float_format = "{:,.2f}".format
import subprocess
plt.figure(figsize = (20, 20))



def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{p:.2f}%\n(â‚±{v:,.2f})'.format(p=pct,v=val)
    return my_autopct

def res_to_int(col, index):
    col = list(col)
    col[index] = int(col[index])
    return col

def strHour(col):
    col = list(col)
    hour = col[0]
    d = datetime.datetime(month = 1, day = 1, year = 2020, hour = hour)
    d2 = d + datetime.timedelta(hours = 1)
    col[0] = f'{d.strftime("%I %p")} - {d2.strftime("%I %p")}'
    return col

class Ui_Form(object):
    def generateCashierGroupReportRange(self, start, end, writer, format1):
        self.parent.c.execute("SELECT (SELECT username from user WHERE id = (SELECT cashier_id FROM transaction where id = transaction_id)) as cashier, SUM(ROUND(((quantity - returned) * price), 2)) as total,  COUNT(transaction_id) as transaction_count, SUM(quantity) as total_quantity FROM sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) between %s and %s GROUP BY cashier; ", (start.strftime("%b %d, %Y"), end.strftime("%b %d, %Y"),))
        results = self.parent.c.fetchall()
        print(results, "results")
        if len(results) > 0:
            results = map(lambda x: res_to_int(x, 3), results)
            headers = ("Cashier", "Total Revenue", "Transaction Count", "Items Sold")
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Cashier", index = False)
            ws = writer.sheets["Cashier"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 1:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)
            plt.figure(figsize=(10, 10), dpi = 200)
            plt.ticklabel_format(useOffset=False)

            plt.title(f"Cashiers' Revenue Report")
            plt.legend("Cashiers")
            plt.pie(df['Total Revenue'], labels=df['Cashier'], autopct=make_autopct(df['Total Revenue']), pctdistance= 0.75, shadow = True, startangle = 90)
            
            
            
            plt.savefig(f"reports_grouped/{start.strftime('%b %d, %Y')} - {end.strftime('%b %d, %Y')}/Cashier_Group.jpg")
            plt.clf()

    def generateCategoryReportGroupRange(self, start, end, writer, format1):
        self.parent.c.execute("SELECT (SELECT category from product where id = product_id) as category, SUM(quantity) as total_items, SUM(ROUND((quantity - returned) * price, 2)) as total from sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) between %s and %s GROUP BY category", (start.strftime("%b %d, %Y"), end.strftime("%b %d, %Y"),))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            results = map(lambda x: res_to_int(x, 1), results)
            headers = ('Category', 'Items Sold', 'Total Revenue',)
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Category", index = False)
            
            
            ws = writer.sheets["Category"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)
            plt.figure(figsize=(10, 10), dpi = 200)
            plt.ticklabel_format(useOffset=False)

            plt.title(f"Category Revenue Report")
            plt.pie(df['Total Revenue'], labels=df['Category'], autopct=make_autopct(df['Total Revenue']), pctdistance=0.87, shadow = True, startangle = 90)
            
            plt.savefig(f"reports_grouped/{start.strftime('%b %d, %Y')} - {end.strftime('%b %d, %Y')} /Category_Group.jpg")
            plt.clf()

        
    def generateHourReportGroupRange(self, start, end , writer, format1):
    
        self.parent.c.execute("SELECT (SELECT HOUR(timestamp) FROM transaction where id = transaction_id) as hour, SUM(quantity) as total_items, SUM(ROUND((quantity - returned) * price, 2)) as total from sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) between %s and %s GROUP BY hour", (start.strftime("%b %d, %Y"), end.strftime("%b %d, %Y"),))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            headers = ("Time", "Items Sold", "Total Revenue")
            results = map(lambda x: res_to_int(x, 1), results)
            results = map(strHour, results)
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Hour", index = False)
            
            ws = writer.sheets["Hour"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)
            plt.ticklabel_format(useOffset=False)
            plt.title(f"Hourly Revenue Report")
            plt.barh(df['Time'], df['Total Revenue'], height = 0.5)
            plt.yticks(ha='right')
            print(plt.gca().get_xbound())
            
            plt.savefig(f"reports_grouped/{start.strftime('%b %d, %Y')} - {end.strftime('%b %d, %Y')}/Hourly_Group.jpg")
            plt.clf()

    def generateProductReportGroupRange(self, start, end, writer, format1):
        paginate_by = 3
        self.parent.c.execute("SELECT (SELECT name from product where id = product_id) as product, SUM(quantity) as total_items, SUM(ROUND(price * quantity, 2)) as total, SUM(returned), SUM(ROUND(price * returned, 2)) as returned_amount, SUM(ROUND(price * (quantity - returned), 2)) as net_revenue FROM sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) between %s and %s GROUP by product ORDER BY total DESC; ", (start.strftime("%b %d, %Y"), end.strftime("%b %d, %Y"),))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            results = map(lambda x: res_to_int(x, 1), results)
            headers = ('Product', 'Items Sold', 'Total Revenue', 'Returned Items', "Returned Amount", "Net Revenue")
            df = pd.DataFrame(results, columns= headers)
            df.to_excel(writer, sheet_name = "Product", index = False)
            ws = writer.sheets["Product"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                ws.set_column(i, i, width)

            df_head = df.head()


            # labels = [f"{name[:18]}...{name[-7:]}" if len(name) > 28 else name for name in df['Product']]
            labels = [f"{name[:18]}...{name[-7:]}" if len(name) > 28 else name for name in df_head['Product']]
            n_count = 5
            pages = -(len(labels) // -(n_count))
            if pages > 1:
                fig, ax = plt.subplots(nrows = pages, figsize=(15, 10))

                for page in range(pages):
                    ax[page].set_xlim(left = 0, right = max(df_head['Total Revenue']))
                    ax[page].barh(labels[page * n_count:(page + 1) * n_count][::-1], df_head["Total Revenue"][page * n_count:(page + 1) * n_count][::-1])
            else:
                fig, ax = plt.subplots(figsize=(15, 10))

                ax.set_xlim(left = 0, right = max(df_head['Total Revenue']))
                ax.barh(labels[::-1], df_head["Total Revenue"][::-1])

        self.parent.c.execute("SELECT (SELECT name from product where id = product_id) as product, SUM(quantity) as number_of_discounts, ROUND(SUM(discount * quantity), 2) as total from sale where discount > 0 and (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) between %s and %s GROUP by product ORDER BY total DESC;", (start.strftime("%b %d, %Y"), end.strftime("%b %d, %Y")))
        with_discounts = self.parent.c.fetchall()
        print(with_discounts)
        if len(with_discounts) > 0:
            with_discounts = map(lambda x: res_to_int(x, 1), with_discounts)
            headers = ('Product', 'Items Discounted', 'Total Discount Amount')
            df = pd.DataFrame(with_discounts, columns = headers)
            df.to_excel(writer, sheet_name = "Product Discount", index = False)
            ws = writer.sheets["Product Discount"]
            wb = writer.book


            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)
                
            plt.savefig(f"reports_grouped/{start.strftime('%b %d, %Y')} - {end.strftime('%b %d, %Y')}/Product_Group.jpg")
            plt.clf()

    def generateCashierGroupReport(self, date, writer, format1):
        d = date.strftime("%b %d, %Y")
        d = date.strftime("%b %d, %Y")
        self.parent.c.execute("SELECT (SELECT username from user WHERE id = (SELECT cashier_id FROM transaction where id = transaction_id)) as cashier, SUM(ROUND(((quantity - returned) * price), 2)) as total,  COUNT(transaction_id) as transaction_count, SUM(quantity) as total_quantity FROM sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) = %s GROUP BY cashier; ", (d, ))
        results = self.parent.c.fetchall()
        if len(results) > 0:

            results = map(lambda x: res_to_int(x, 3), results)
            headers = ("Cashier", "Total Revenue", "Transaction Count", "Items Sold")
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Cashier", index = False)
            ws = writer.sheets["Cashier"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 1:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)

            plt.figure(figsize=(10, 10), dpi = 200)

            plt.title(f"Cashiers' Revenue Report on {date.strftime('%b %d, %Y')}")
            plt.legend("Cashiers")
            plt.pie(df['Total Revenue'], labels=df['Cashier'], autopct=make_autopct(df['Total Revenue']), pctdistance= 0.75, shadow = True, startangle = 90)
            
            
            
            plt.savefig(f"reports/{date.strftime('%b %d, %Y')}/Cashier_Group.jpg")
            plt.clf()

    def generateCategoryReportGroup(self, date, writer, format1):
        d = date.strftime("%b %d, %Y")
        self.parent.c.execute("SELECT (SELECT category from product where id = product_id) as category, SUM(quantity) as total_items, SUM(ROUND((quantity - returned) * price, 2)) as total from sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) =  %s GROUP BY category", (d, ))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            results = map(lambda x: res_to_int(x, 1), results)
            headers = ('Category', 'Items Sold', 'Total Revenue',)
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Category", index = False)
            
            
            ws = writer.sheets["Category"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)

            # filt = self.df['transaction_day'] == d
            # df_category = self.df[filt]
            # df_category = df_category.groupby('category')
            # categories = df_category['category'].first()
            # labels = [x for x in categories]
            # amounts = []
            # for category in categories:
            #     result = df_category.get_group(category)
            #     total = result['total'].sum()
            #     amounts.append(total)
            plt.figure(figsize=(10, 10), dpi = 200)

            plt.title(f"Category Revenue Report")
            plt.pie(df['Total Revenue'], labels=df['Category'], autopct=make_autopct(df['Total Revenue']), pctdistance=0.87, shadow = True, startangle = 90)
            
            plt.savefig(f"reports/{date.strftime('%b %d, %Y')}/Category_Group.jpg")
            plt.clf()

        
    def generateHourReportGroup(self, date, writer, format1):
        d = date.strftime("%b %d, %Y")
    
        self.parent.c.execute("SELECT (SELECT HOUR(timestamp) FROM transaction where id = transaction_id) as hour, SUM(quantity) as total_items, SUM(ROUND((quantity - returned) * price, 2)) as total from sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) =  %s GROUP BY hour", (d, ))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            headers = ("Time", "Items Sold", "Total Revenue")
            results = map(lambda x: res_to_int(x, 1), results)
            results = map(strHour, results)
            df = pd.DataFrame(results, columns = headers)
            df.to_excel(writer, sheet_name = "Hour", index = False)
            
            ws = writer.sheets["Hour"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)

            # def strHour(hour):
            #     d = datetime.datetime(month = 1, day = 1, year = 2020, hour = hour)
            #     d2 = d + datetime.timedelta(minutes = 59, seconds = 59)
            #     return f'{d.strftime("%I:%M %p")} - {d2.strftime("%I:%M %p")}'
            # labels = [strHour(x) for x in df['Time']]

            plt.title(f"Hourly Revenue Report")
            plt.barh(df['Time'], df['Total Revenue'], height = 0.5)
            plt.yticks(ha='right')
            
            plt.savefig(f"reports/{date.strftime('%b %d, %Y')}/Hourly_Group.jpg")
            plt.clf()

    def generateProductReportGroup(self, date, writer, format1):
        paginate_by = 3
        d = date.strftime("%b %d, %Y")
        self.parent.c.execute("SELECT (SELECT name from product where id = product_id) as product, SUM(quantity) as total_items, SUM(ROUND(price * quantity, 2)) as total, SUM(returned), SUM(ROUND(price * returned, 2)) as returned_amount, SUM(ROUND(price * (quantity - returned), 2)) as net_revenue FROM sale WHERE (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) = %s GROUP by product ORDER BY total DESC;", (d, ))
        results = self.parent.c.fetchall()
        if len(results) > 0:
            results = map(lambda x: res_to_int(x, 1), results)
            headers = ('Product', 'Items Sold', 'Total Revenue', 'Returned Items', "Returned Amount", "Net Revenue")
            df = pd.DataFrame(results, columns= headers)
            df.to_excel(writer, sheet_name = "Product", index = False)
            ws = writer.sheets["Product"]

            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                ws.set_column(i, i, width)
            
            df_head = df.head()

            # labels = [f"{name[:18]}...{name[-7:]}" if len(name) > 28 else name for name in df['Product']]
            labels = [f"{name[:18]}...{name[-7:]}" if len(name) > 28 else name for name in df_head['Product']]
            n_count = 10
            pages = -(len(labels) // -(n_count))
            fig, ax = plt.subplots(nrows = pages, figsize=(20, 20))
            if pages > 1:
                for page in range(pages):
                    ax[page].set_xlim(left = 0, right = max(df_head['Total Revenue']))
                    ax[page].set_ylim(bottom = -.5, top = 9)

                    ax[page].barh(labels[page * n_count:(page + 1) * n_count][::-1], df_head["Total Revenue"][page * n_count:(page + 1) * n_count][::-1])


            else:
                ax.set_xlim(left = 0, right = max(df_head['Total Revenue']))
                ax.set_ylim(bottom = -.5, top = 9)
                ax.barh(labels[::-1], df_head["Total Revenue"][::-1])

            plt.savefig(f"reports/{date.strftime('%b %d, %Y')}/Product_Group.jpg")
            plt.clf()

        self.parent.c.execute("SELECT (SELECT name from product where id = product_id) as product, SUM(quantity) as number_of_discounts, ROUND(SUM(discount * quantity), 2) as total from sale where discount > 0 and (SELECT DATE_FORMAT(timestamp, '%b %d, %Y') FROM transaction where id = transaction_id) = %s GROUP by product ORDER BY total DESC;", (d, ))
        with_discounts = self.parent.c.fetchall()
        if len(with_discounts) > 0:
            with_discounts = map(lambda x: res_to_int(x, 1), with_discounts)
            headers = ('Product', 'Items Discounted', 'Total Discount Amount')
            df = pd.DataFrame(with_discounts, columns = headers)
            df.to_excel(writer, sheet_name = "Product Discount", index = False)
            ws = writer.sheets["Product Discount"]
            wb = writer.book


            for i, col in enumerate(df.columns):
                width = max(df[col].apply(lambda x: len(str(x))).max(), len(col))
                if i != 2:
                    ws.set_column(i, i, width)
                else:
                    ws.set_column(i, i, width, format1)


    def generateDailyReports(self):
        self.progressBar.show()
        self.label_4.show()
        start_date = self.startDateEdit.date().toPyDate()
        end_date = self.endDateEdit.date().toPyDate()
        total_days = (end_date - start_date).days + 1
        
        curr = 0
        while start_date <= end_date:
            if not os.path.isdir(f'reports/{start_date.strftime("%b %d, %Y")}'):
                report_folder = os.path.join(os.getcwd(), f"reports\\{start_date.strftime('%b %d, %Y')}")
                os.mkdir(report_folder)
            with pd.ExcelWriter(f'reports/{start_date.strftime("%b %d, %Y")}/Daily Report.xlsx', engine = 'xlsxwriter') as writer:
                wb = writer.book
                format1 = wb.add_format({'num_format': '0.00'})
                self.generateCashierGroupReport(start_date, writer, format1)
                self.generateCategoryReportGroup(start_date, writer, format1)
                self.generateHourReportGroup(start_date, writer, format1)
                self.generateProductReportGroup(start_date, writer, format1)
                print(f"Done with {start_date.strftime('%b %d, %Y')}")
                start_date += datetime.timedelta(days = 1)
                curr += 1
                progress = (curr / total_days) * 100
                self.progressBar.setValue(progress)
                items = curr % 3
                label = f"Generating Report {'.' * items}"
                self.label_4.setText(label)
                plt.savefig("C:/users/development/desktop/all.png")
                plt.clf()
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setWindowTitle("Done!")
        msg.setText("Done generating reports. Please check the reports folder")
        msg.exec_()
        del msg
        subprocess.Popen(r'explorer /select,"reports"')
        

    def generateRangeReports(self):
        start_date = self.startDateEdit.date().toPyDate()
        end_date = self.endDateEdit.date().toPyDate()
        s = start_date.strftime("%b %d, %Y")
        e = end_date.strftime("%b %d, %Y")
        if not os.path.isdir(f'reports_grouped/{s} - {e}'):
            report_folder = os.path.join(os.getcwd(), f"reports_grouped\\{s} - {e}")
            os.mkdir(report_folder)
        with pd.ExcelWriter(f'reports_grouped/{s} - {e}/Range Report.xlsx', engine = 'xlsxwriter') as writer:
            wb = writer.book
            format1 = wb.add_format({'num_format': '0.00'})
            self.generateCashierGroupReportRange(start_date, end_date, writer, format1)
            self.generateCategoryReportGroupRange(start_date, end_date, writer, format1)
            self.generateHourReportGroupRange(start_date, end_date, writer, format1)
            self.generateProductReportGroupRange(start_date, end_date, writer, format1)
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setWindowTitle("Done!")
        msg.setText("Done generating reports. Please check the reports folder")
        msg.exec_()
        del msg
        subprocess.Popen(f'explorer /select,"reports_grouped\\{s} - {e}')

    def setupUi(self, Form, parent):
        self.parent = parent
        Form.setObjectName("Form")
        Form.setFixedSize(438, 320)
        Form.setWindowModality(QtCore.Qt.ApplicationModal)
        Form.closeEvent = lambda x: parent.Form.show()
        Form.setStyleSheet("")
        self.layoutWidget = QtWidgets.QWidget(Form)
        self.layoutWidget.setGeometry(QtCore.QRect(80, 20, 271, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        
        today = datetime.datetime.today()
        yesterday = today - datetime.timedelta(days = 1)
        self.startDateEdit = QtWidgets.QDateEdit(self.layoutWidget)
        self.startDateEdit.setDisplayFormat("MMM dd, yyyy")
        self.startDateEdit.setDate(QtCore.QDate(yesterday))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.startDateEdit.setFont(font)
        self.startDateEdit.setObjectName("startDateEdit")
        self.verticalLayout.addWidget(self.startDateEdit)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.endDateEdit = QtWidgets.QDateEdit(self.layoutWidget)
        self.endDateEdit.setDisplayFormat("MMM dd, yyyy")
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.endDateEdit.setFont(font)
        self.endDateEdit.setObjectName("endDateEdit")
        self.endDateEdit.setDate(QtCore.QDate(today))

        self.verticalLayout_2.addWidget(self.endDateEdit)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.layoutWidget1 = QtWidgets.QWidget(Form)
        self.layoutWidget1.setGeometry(QtCore.QRect(120, 140, 209, 91))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.dailyReport = QtWidgets.QPushButton(self.layoutWidget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dailyReport.sizePolicy().hasHeightForWidth())
        self.dailyReport.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.dailyReport.setFont(font)
        self.dailyReport.setStyleSheet("QPushButton {\n"
"background-color: #388e3c; color: white; border-radius:5px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background-color: #2e7d32; color: white; border-radius:5px;\n"
"}")
        self.dailyReport.setObjectName("dailyReport")
        self.dailyReport.clicked.connect(self.generateDailyReports)
        self.dailyReport.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.verticalLayout_4.addWidget(self.dailyReport)
        self.groupedReport = QtWidgets.QPushButton(self.layoutWidget1)
        self.groupedReport.clicked.connect(self.generateRangeReports)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupedReport.sizePolicy().hasHeightForWidth())
        self.groupedReport.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        self.groupedReport.setFont(font)
        self.groupedReport.setStyleSheet("QPushButton {background-color: #1976d2; color: white; border-radius:5px;}\n"
"\n"
"QPushButton:hover {background-color: #1565c0; color: white; border-radius:5px;}")
        self.groupedReport.setObjectName("groupedReport")
        self.groupedReport.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))

        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(160, 240, 130, 49))
        self.widget.setObjectName("widget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_4 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)
        self.progressBar = QtWidgets.QProgressBar(self.widget)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_5.addWidget(self.progressBar)
        self.progressBar.hide()
        self.label_4.hide()

        self.verticalLayout_4.addWidget(self.groupedReport)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Generate Report"))
        self.label_3.setText(_translate("Form", "Report Generation"))
        self.label.setText(_translate("Form", "Start Date"))
        self.label_2.setText(_translate("Form", "End Date"))
        self.dailyReport.setText(_translate("Form", "Generate as Daily Reports"))
        self.groupedReport.setText(_translate("Form", "Generate as Grouped Reports"))
        self.label_4.setText(_translate("Form", "Generating Report"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector, os
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewDialog
from dotenv import load_dotenv


def isFloat(value) -> bool:
    try:
        float(value)
        return True
    except ValueError:
        return False
    
def isInt(value) -> bool:
    try:
        int(value)
        return True
    except ValueError:
        return False


ARROW_UP = 16777235
ARROW_DOWN = 16777237
NUMPAD_PLUS = 43
NUMPAD_MINUS = 45

class Ui_MainWindow(object):

    #start of the MainWindow button functions
    def showReturnProduct(self):
        ReturnProductDialog.show()
    
    def createReceipt(self, items):
        with open("receipt.txt", "w", encoding = "utf8") as f:
            title = "CE Philippines"
            address = "M.r. Lat St & President Jose P. Laurel Hwy"
            address2 = "Batangas City, Philippines"
            r_title = (65 - len(title)) // 2
            r_address = (65 - len(address)) // 2
            r_address2 = (65 - len(address2)) // 2
            title = f"{' ' * r_title}{title}{' ' * (65 - r_title - len(title))}"
            address = f"{' ' * r_address}{address}{' ' * (65 - r_address - len(address))}"
            address2 = f"{' ' * r_address2}{address2}{' ' * (65 - r_address2 - len(address2))}"
            f.write(title + "\n")
            f.write(address + "\n")
            f.write(address2 + "\n\n")
            cashier = "Jason Villa"
            transaction_id = 152
            transaction_id = str(transaction_id).rjust(10, "0")
            f.write(f"Transaction #: {transaction_id}".ljust(30, " ") )
            f.write(f"Cashier: {cashier}\n".rjust(35, " ") )
            f.write("-" * 65 + "\n")
            f.write("Qty Product Price Total\n")
            
            for item in items:
                name, price, quantity, discount = item
                total = price * quantity
                quantity = str(quantity).rjust(3, " ") #3
                price = "@ ₱{:,.2f}".format(price)
                price = price.rjust(11, " ") #10
                if len(name) > 37:
                    name = f"{name[:22]}...{name[-9:]}"
                name = name.ljust(37)
                total = "₱{:,.2f}".format(total)
                total = total.rjust(11, " ")
                all_lines = f"{quantity} {name} {price} {total}"
                f.write(all_lines + "\n")
            lines = "-"*65
            f.write(lines + "\n")
            total_amount = sum([x[1] * x[2] for x in items])
            discount = sum([x[-1] * x[2] for x in items])
            total_amount = total_amount - discount
            vattable = total_amount / 1.12
            vattable_label = "    VATTABLE"
            vattable_amount = "₱{:,.2f}".format(vattable)
            vattable_amount = vattable_amount.rjust(65 - len(vattable_label), " ")
            f.write(f"{vattable_label}{vattable_amount}\n")

            vat = total_amount - (total_amount / 1.12)
            vat_label = "    E-VAT (12%)"
            vat_amount = "₱{:,.2f}".format(vat)
            vat_amount = vat_amount.rjust(65 - len(vat_label), " ")
            f.write(f"{vat_label}{vat_amount}\n")

            discount_label = "    TOTAL DISCOUNT"
            discount_amount = "₱{:,.2f}".format(discount)
            discount_amount = discount_amount.rjust(65 - len(discount_label), " ")
            f.write(f"{discount_label}{discount_amount}\n\n")

            total_label  = "    TOTAL"
            total_amount_str = "₱{:,.2f}".format(total_amount)
            total_amount_str = total_amount_str.rjust(56, " ")
            f.write(f"{total_label}{total_amount_str}\n")

            payment_label = "    PAYMENT"
            payment_amount = float(self.paymentArea.text())
            payment_amount_str = "₱{:,.2f}".format(payment_amount)
            payment_amount_str = payment_amount_str.rjust(65 - len(payment_label), " ")
            f.write(f"{payment_label}{payment_amount_str}\n")

            change_line = "-" * 65
            f.write(change_line + "\n")
            change = payment_amount - total_amount
            change_label = "    CHANGE"
            change_str = "₱{:,.2f}".format(change)
            change_str = change_str.rjust(65 - len(change_label), " ")
            f.write(f"{change_label}{change_str}")

    def setDiscount(self, *arg):
        ind = self.productTable.currentRow()
        if ind < 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("No item selected")
            msg.setText("Please select an item")
            msg.exec_()
            del msg
        else:
            DiscountWindowDialog.show()
    def setOutput(self, *arg):
        subTotals = []
        discounts = []
        for i in range(self.productTable.rowCount()):
            price = self.productTable.item(i, 2).text()
            qty = self.productTable.item(i, 3).text()
            subTotal = float(price) * int(qty)
            subTotals.append(subTotal)
        for i in range(self.productTable.rowCount()):
            discount = self.productTable.item(i, 4).text()
            qty = self.productTable.item(i, 3).text()
            all_discounts = float(discount.replace(",", "")) * int(qty)
            discounts.append(float(all_discounts))
        discount_amount = sum(discounts)
        total = sum(subTotals) - discount_amount
        vattable = total / 1.12
        rounded_vattable = round(vattable, 2)
        vat = total - vattable
        payment = self.paymentArea.text()
        if payment == "":
            payment = 0.0
        else:
            payment = float(payment)
        change = payment - total
        self.changeOuput.setText("{:,.2f}".format(change))
        self.totalOutput.setText("{:,.2f}".format(total))
        self.vattableOutput.setText("{:,.2f}".format(vattable))
        self.vatOutput.setText("{:,.2f}".format(vat))
        self.discountOutput.setText("{:,.2f}".format(discount_amount))

    def setPayment(self, *arg):
        val = self.paymentArea.text()
        if isFloat(val):
            pass
        else:
            self.paymentArea.setText(str(val[:-1]))
        self.setOutput()

    def captureKeyPress(self, eve):
        self.capturedKeys.add(eve.key())
        focused = MainWindow.focusWidget().objectName()
        if eve.key() == ARROW_UP:
            currentRow = self.productTable.currentRow()
            if self.productTable.currentRow() < 0:
                self.productTable.setCurrentCell(self.productTable.rowCount() - 1, 1)
            else:
                self.productTable.setCurrentCell(self.productTable.currentRow() - 1, 1)
            self.capturedKeys.clear()
        if eve.key() == ARROW_DOWN:
            row = self.productTable.currentRow()
            self.productTable.setCurrentCell(row + 1, 1)
            self.capturedKeys.clear()
        
        if QtCore.Qt.Key_F1 == eve.key():
            self.paymentArea.setFocus()
            self.capturedKeys.clear()

        if QtCore.Qt.Key_F2 == eve.key():
            self.setDiscount()
            self.capturedKeys.clear()
        

        if QtCore.Qt.Key_F5 == eve.key():
            self.searchProduct()
            self.capturedKeys.clear()
        
        if QtCore.Qt.Key_F4 == eve.key():
            self.printReceipt()
            self.capturedKeys.clear()

        if QtCore.Qt.Key_F6 == eve.key():
            InquireWindowDialog.show()

        if QtCore.Qt.Key_F7 == eve.key():
            self.holdSearch()

        if QtCore.Qt.Key_F8 == eve.key():
            self.productTable.holdSale(MainWindow = MainWindow, parent = self, cashier_id = LoginForm_ui.id)
            self.capturedKeys.clear()

        if QtCore.Qt.Key_F9 == eve.key():
            self.productTable.removeItem(MainWindow = MainWindow, parent = self)
            self.setOutput()
            self.capturedKeys.clear()
        
        if QtCore.Qt.Key_F10 == eve.key():
            self.voidSale()
            self.setOutput()
            self.capturedKeys.clear()
        
        if QtCore.Qt.Key_F11 == eve.key():
            self.showReturnProduct()

        if QtCore.Qt.Key_F12 == eve.key():
            PriceChangeWindowDialog.show()
            self.capturedKeys.clear()

        if QtCore.Qt.Key_Return in self.capturedKeys and focused == "paymentArea":
            self.printReceipt()
            self.capturedKeys.clear()

        if QtCore.Qt.Key_Return in self.capturedKeys and focused == "barcodeArea":
            self.checkBarcode()
            self.capturedKeys.clear()

    def checkBarcode(self):
        code = self.barcodeArea.text()
        code = [x.strip() for x in code.split("*")]
        if len(code) > 1:
            qty = int(code[0])
            barcode = code[1]
        else:
            qty = 1
            barcode = code[0]
        if isInt(barcode):
            self.productTable.addItem(barcode, qty, self)
            self.barcodeArea.setText("")
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("Invalid barcode")
            msg.setText("Barcode can only contain numbers")
            msg.exec_()
            del msg
            self.barcodeArea.setText("")
        
        self.capturedKeys.clear()

    def inquire(self):
        InquireWindowDialog.show()
    
    def searchProduct(self, *arg):
        SearchWindow_ui.searchProduct()
        SearchWindowDialog.show()

    def releaseKeyPress(self, eve):
        try:
            self.capturedKeys.remove(eve.key())
        except KeyError:
            pass

    def holdSearch(self):
        self.HoldSearchWindow_ui.populateTable()
        HoldSearchDialog.show()
        

    def printReceipt(self, *arg):
        change = self.changeOuput.text()
        change = float(change)
        if self.productTable.rowCount() <= 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setWindowTitle("Empty table.")
            msg.setText("Please add items to the table.")
            msg.exec_()
        else:
            if change >= 0:
                self.capturedKeys.clear()
                c.execute("INSERT INTO transaction (cashier_id) VALUES (%s)", (LoginForm_ui.id, ))
                transaction_id = c.lastrowid
                rows = self.productTable.rowCount()
                for r in range(rows):
                    barcode = self.productTable.item(r, 0).text()
                    name = self.productTable.item(r, 1).text()
                    price = self.productTable.item(r, 2).text()
                    qty = self.productTable.item(r, 3).text()
                    discount = self.productTable.item(r, 4).text()
                    c.execute("SELECT id FROM product WHERE barcode = %s", (barcode, ))
                    product_id = c.fetchone()[0]
                    c.execute("INSERT INTO sale (transaction_id, product_id, price, discount, quantity) VALUES (%s, %s, %s, %s, %s)", (transaction_id, product_id, price, discount, qty,))
                    c.execute("SELECT stock FROM product WHERE id = %s", (product_id, ))
                    current_stock = int(c.fetchone()[0])
                    new_stock = current_stock - int(qty)
                    c.execute("UPDATE product SET stock = %s WHERE id = %s", (new_stock, product_id, ))
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setWindowTitle("Printing Receipt")
                msg.setText("Please count your change")
                msg.exec_()
                self.productTable.setRowCount(0)
                self.paymentArea.setEnabled(False)
                self.barcodeArea.setFocus()                
                del msg
                conn.commit()
                c.execute("SELECT (select name from product where id = product_id), price, quantity, discount from sale WHERE transaction_id = %s", (transaction_id, ))
                items = c.fetchall()
                self.createReceipt(items)
                os.system("notepad /p receipt.txt")

            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setWindowTitle("Insufficient Amount")
                msg.setText("Please pay sufficient amount.")
                msg.exec_()
                del msg

    def modifiedQtyChange(self): #this is a basic add
        try:
            last_char = self.barcodeArea.text()[-1]
            if last_char == "+":
                self.productTable.addQty(parent = self)
                self.barcodeArea.setText(self.barcodeArea.text()[:-1])
            elif last_char == "-":
                self.productTable.subQty(parent = self)
                self.barcodeArea.setText(self.barcodeArea.text()[:-1])
        except:
            pass
    
    def voidSale(self):
        if self.productTable.rowCount() <= 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("No items in the table")
            msg.setText("Can't void a table if it's empty.")
            msg.exec_()
            del msg
        else:
            buttonReply = QtWidgets.QMessageBox.question(MainWindow, 'Void transaction?', "Are you sure you want to void this transaction?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
            if buttonReply == QtWidgets.QMessageBox.Yes:
                self.productTable.setRowCount(0)
                self.setOutput()

    #end of the MainWindow button functions

    def setupUi(self, MainWindow, HoldSearchWindow_ui):
        self.c = c
        self.conn = conn
        self.capturedKeys = set()
        iconSize = (75, 75)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1280, 640)
        MainWindow.keyPressEvent = self.captureKeyPress
        MainWindow.keyReleaseEvent = self.releaseKeyPress
        self.HoldSearchWindow_ui = HoldSearchWindow_ui
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("#centralwidget {background-image: url('Assets/MainWindow.png')}")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.productTable = CustomWidgets.CustomTableWidget(self.centralwidget)
        self.productTable.setGeometry(QtCore.QRect(10, 150, 980, 449))
        self.productTable.keyPressEvent = lambda x: self.productTable.keyCapture(x, self, MainWindow, InquireWindowDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.productTable.sizePolicy().hasHeightForWidth())
        font = QtGui.QFont()
        font.setPointSize(12)
        self.productTable.setFont(font)
        self.productTable.setSizePolicy(sizePolicy)
        self.productTable.setObjectName("productTable")
        self.productTable.setColumnCount(6)
        self.productTable.setColumnWidth(0, 90)
        self.productTable.setColumnWidth(1, 510)
        self.productTable.setColumnWidth(2, 90)
        self.productTable.setColumnWidth(3, 90)
        self.productTable.setColumnWidth(4, 90)
        self.productTable.setColumnWidth(5, 90)
        self.productTable.verticalHeader().hide()
        self.productTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.productTable.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.productTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.productTable.setHorizontalHeaderLabels(['Barcode', 'Description', 'Price', 'Qty', 'Discount',  'Sub-Total'])
        self.productTable.keyPressEvent = lambda x: self.productTable.bindKeys(x, parent = self)
        header = self.productTable.horizontalHeader()
        
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Fixed)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1000, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("padding-left: 10px; padding-top: 5px;")
        self.label.setObjectName("label")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(1100, 150, 171, 281))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.vattableOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vattableOutput.setFont(font)
        self.vattableOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vattableOutput.setObjectName("vattableOutput")
        self.verticalLayout_2.addWidget(self.vattableOutput)
        self.vatOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vatOutput.setFont(font)
        self.vatOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vatOutput.setObjectName("vatOutput")
        self.verticalLayout_2.addWidget(self.vatOutput)
        self.discountOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.discountOutput.setFont(font)
        self.discountOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.discountOutput.setObjectName("discountOutput")
        self.verticalLayout_2.addWidget(self.discountOutput)
        self.totalOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.totalOutput.setFont(font)
        self.totalOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.totalOutput.setObjectName("totalOutput")
        self.verticalLayout_2.addWidget(self.totalOutput)
        self.paymentArea = QtWidgets.QLineEdit(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.paymentArea.sizePolicy().hasHeightForWidth())
        self.paymentArea.setMinimumSize(QtCore.QSize(0, 30))
        self.paymentArea.textChanged.connect(self.setPayment)
        self.paymentArea.setSizePolicy(sizePolicy)
        self.paymentArea.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.paymentArea.setFont(font)
        self.paymentArea.setStyleSheet("padding-right: 5px;")
        self.paymentArea.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.paymentArea.setObjectName("paymentArea")
        self.verticalLayout_2.addWidget(self.paymentArea)
        self.changeOuput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.changeOuput.setFont(font)
        self.changeOuput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.changeOuput.setObjectName("changeOuput")
        self.verticalLayout_2.addWidget(self.changeOuput)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(990, 150, 101, 281))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.varttableLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.varttableLabel.setFont(font)
        self.varttableLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.varttableLabel.setObjectName("varttableLabel")
        self.verticalLayout.addWidget(self.varttableLabel)
        self.vatLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vatLabel.setFont(font)
        self.vatLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vatLabel.setObjectName("vatLabel")
        self.verticalLayout.addWidget(self.vatLabel)
        self.discountLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.discountLabel.setFont(font)
        self.discountLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.discountLabel.setObjectName("discountLabel")
        self.verticalLayout.addWidget(self.discountLabel)
        self.totalLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.totalLabel.setFont(font)
        self.totalLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.totalLabel.setObjectName("totalLabel")
        self.verticalLayout.addWidget(self.totalLabel)
        self.paymentLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.paymentLabel.setFont(font)
        self.paymentLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.paymentLabel.setObjectName("paymentLabel")
        self.verticalLayout.addWidget(self.paymentLabel)
        self.changeLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.changeLabel.setFont(font)
        self.changeLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.changeLabel.setObjectName("changeLabel")
        self.verticalLayout.addWidget(self.changeLabel)
        self.barcodeArea = QtWidgets.QLineEdit(self.centralwidget)
        self.barcodeArea.setGeometry(QtCore.QRect(10, 110, 981, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.barcodeArea.setFont(font)
        self.barcodeArea.setStyleSheet("padding-left: 5px;")
        self.barcodeArea.setText("")
        self.barcodeArea.setObjectName("barcodeArea")
        self.barcodeArea.textChanged.connect(self.modifiedQtyChange)
        self.messageBox = QtWidgets.QLabel(self.centralwidget)
        self.messageBox.setGeometry(QtCore.QRect(992, 432, 280, 162))
        self.messageBox.setMinimumSize(QtCore.QSize(280, 162))
        self.messageBox.setMaximumSize(QtCore.QSize(275, 162))
        self.messageBox.setBaseSize(QtCore.QSize(100, 100))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.messageBox.setFont(font)
        self.messageBox.setStyleSheet("background-color: white; border: 1px dashed black")
        self.messageBox.setAlignment(QtCore.Qt.AlignCenter)
        self.messageBox.setObjectName("messageBox")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(10, 30, 1195, 75))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.tender_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Tender_Cash.png", iconSize, "tender_button")
        self.discount_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Discount.png", iconSize, "discount_button")
        self.discount_button.mousePressEvent = lambda x: self.setDiscount()
        self.taxExcempt_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Tax_Excempt.png", iconSize, "taxExcempt_button")
        self.print_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Print_Receipt.png", iconSize, "print_button")
        self.print_button.mousePressEvent = lambda x: self.printReceipt()
        self.search_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Search.png", iconSize, "search_button")
        self.search_button.mousePressEvent = self.searchProduct
        self.inquire_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Inquire.png", iconSize, 'inquire_button')
        self.inquire_button.mousePressEvent = lambda x: InquireWindowDialog.show()
        self.search_hold_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Search_Hold.png", iconSize, "search_hold_button")
        self.search_hold_button.mousePressEvent = lambda x: self.holdSearch()
        self.hold_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Hold_Sale.png", iconSize, "hold_button")
        self.hold_button.mousePressEvent = lambda x: self.productTable.holdSale(MainWindow = MainWindow, parent = self, cashier_id = LoginForm_ui.id)
        self.remove_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Remove_Item.png", iconSize, "remove_button")
        self.remove_button.mousePressEvent = lambda x: self.productTable.removeItem(MainWindow = MainWindow, parent = self)
        self.void_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Void_Transaction.png", iconSize, "void_button")
        self.void_button.mousePressEvent = lambda x: self.voidSale()
        self.returnProduct_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Return_Product.png", iconSize, "returnProduct_button")
        self.returnProduct_button.mousePressEvent = lambda x: self.showReturnProduct()
        self.change_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Change_Price.png", iconSize, "change_button")
        self.change_button.mousePressEvent = lambda x: PriceChangeWindowDialog.show()
        self.add_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Increase_Qty.png", iconSize, "add_button")
        self.add_button.mousePressEvent = lambda x: self.productTable.addQty(parent = self)
        self.sub_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Decrease_Qty.png", iconSize, "sub_button")
        self.sub_button.mousePressEvent = lambda x: self.productTable.subQty(parent = self)
        self.logout_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Logout.png", iconSize, "logout_button")
        self.logout_button.mousePressEvent = lambda x: sys.exit()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionReports = QtWidgets.QAction(MainWindow)
        self.actionReports.setObjectName("actionReports")
        self.actionTransaction = QtWidgets.QAction(MainWindow)
        self.actionTransaction.setObjectName("actionTransaction")
        self.actionExit_F4 = QtWidgets.QAction(MainWindow)
        self.actionExit_F4.setObjectName("actionExit_F4")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.paymentArea, self.barcodeArea)
        MainWindow.setTabOrder(self.barcodeArea, self.productTable)
        self.barcodeArea.setFocus()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.vattableOutput.setText(_translate("MainWindow", "0.00"))
        self.vatOutput.setText(_translate("MainWindow", "0.00"))
        self.discountOutput.setText(_translate("MainWindow", "0.00"))
        self.totalOutput.setText(_translate("MainWindow", "0.00"))
        self.paymentArea.setPlaceholderText(_translate("MainWindow", "0.00"))
        self.changeOuput.setText(_translate("MainWindow", "0.00"))
        self.varttableLabel.setText(_translate("MainWindow", "Vattable:"))
        self.vatLabel.setText(_translate("MainWindow", "Vat (12%):"))
        self.discountLabel.setText(_translate("MainWindow", "Discount:"))
        self.totalLabel.setText(_translate("MainWindow", "Total:"))
        self.paymentLabel.setText(_translate("MainWindow", "Payment:"))
        self.changeLabel.setText(_translate("MainWindow", "Change:"))
        self.barcodeArea.setPlaceholderText(_translate("MainWindow", "Qty*Barcode"))
        self.messageBox.setText(_translate("MainWindow", "Message Box Here"))
        self.actionReports.setText(_translate("MainWindow", "Reports"))
        self.actionTransaction.setText(_translate("MainWindow", "Transactions"))
        self.actionExit_F4.setText(_translate("MainWindow", "Exit (F4)"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    import SearchWindow, HoldSearchWindow, CustomWidgets, InquireWindow, DiscountWindow, json , PriceChangeWindow, datetime, LoginForm, DatabaseCreate, AccountSetup, ReturnProduct
    
    load_dotenv()
    success, conn = DatabaseCreate.setupConnection()
    if not success:
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        msg.setWindowTitle("Connection Error")
        if type(conn) == mysql.connector.errors.DatabaseError:
            msg.setText("Can't connect to Mysql 'localhost'")
        elif type(conn) == mysql.connector.errors.ProgrammingError:
            msg.setText("Access denied. Invalid credentials")
        else:
            msg.setText(repr(conn))
        msg.exec_()
        del msg
        sys.exit()

    c = conn.cursor()
    c.execute("SELECT * from user where is_admin = True")
    result = c.fetchone()
    if not result:
        AccountSetupWidget = QtWidgets.QWidget()
        AccountSetup_ui = AccountSetup.Ui_Form()
        AccountSetup_ui.setupUi(AccountSetupWidget, conn)
        AccountSetupWidget.show()
    else:
        MainWindow = QtWidgets.QMainWindow()
        MainWindow_ui = Ui_MainWindow()
        InquireWindowDialog = QtWidgets.QDialog()
        InquireWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        InquireWindow_ui = InquireWindow.Ui_Dialog()
        InquireWindow_ui.setupUi(InquireWindowDialog, c)
        SearchWindowDialog = QtWidgets.QWidget()
        SearchWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        SearchWindow_ui = SearchWindow.Ui_Form()
        SearchWindow_ui.setupUi(SearchWindowDialog, c, MainWindow_ui)
        HoldSearchDialog = QtWidgets.QWidget()
        HoldSearchDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        HoldSearchWindow_ui = HoldSearchWindow.Ui_Dialog()
        HoldSearchWindow_ui.setupUi(HoldSearchDialog, c, MainWindow_ui)
        DiscountWindowDialog = QtWidgets.QWidget()
        DiscountWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DiscountWindow_ui = DiscountWindow.Ui_Dialog()
        DiscountWindow_ui.setupUi(DiscountWindowDialog, c = c, parent = MainWindow_ui)
        MainWindow_ui.setupUi(MainWindow, HoldSearchWindow_ui)
        LoginFormDialog = QtWidgets.QWidget()
        LoginFormDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        LoginForm_ui = LoginForm.Ui_Form()
        LoginForm_ui.setupUi(LoginFormDialog, MainWindow, MainWindow_ui)
        LoginFormDialog.show()
        PriceChangeWindowDialog = QtWidgets.QWidget()
        PriceChangeWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        PriceChangeWindow_ui = PriceChangeWindow.Ui_Dialog()
        PriceChangeWindow_ui.setupUi(PriceChangeWindowDialog, c = c, parent = MainWindow_ui)
        ReturnProductDialog = QtWidgets.QWidget()
        ReturnProductDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        ReturnProduct_ui = ReturnProduct.Ui_Form()
        ReturnProduct_ui.setupUi(ReturnProductDialog, MainWindow_ui)

    sys.exit(app.exec_())
    conn.close()
